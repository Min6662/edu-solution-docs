#!/bin/bash

# üöÄ Edu Solution - Comprehensive App Store Build Script
# This script automates the complete build process for App Store deployment

set -e  # Exit on any error

echo "üéØ Starting Edu Solution App Store Build Process..."
echo "=================================================="

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# App information
APP_NAME="Edu Solution"
BUNDLE_ID="com.edusolution.app"
VERSION="1.0.5"
BUILD_NUMBER="5"

echo -e "${BLUE}üì± App Information:${NC}"
echo "  ‚Ä¢ App Name: $APP_NAME"
echo "  ‚Ä¢ Bundle ID: $BUNDLE_ID" 
echo "  ‚Ä¢ Version: $VERSION"
echo "  ‚Ä¢ Build Number: $BUILD_NUMBER"
echo ""

# Navigate to project directory
cd "/Users/min/Desktop/Edu Solution"

# Check if we're in the right directory
if [ ! -f "pubspec.yaml" ]; then
    echo -e "${RED}‚ùå Error: pubspec.yaml not found. Please run this script from the project root.${NC}"
    exit 1
fi

# Check if Flutter is installed
if ! command -v flutter &> /dev/null; then
    echo -e "${RED}‚ùå Error: Flutter is not installed or not in PATH.${NC}"
    exit 1
fi

echo -e "${YELLOW}üßπ Step 1: Cleaning project...${NC}"
flutter clean
echo -e "${GREEN}‚úÖ Project cleaned successfully${NC}"
echo ""

echo -e "${YELLOW}üì¶ Step 2: Getting dependencies...${NC}"
flutter pub get
echo -e "${GREEN}‚úÖ Dependencies retrieved successfully${NC}"
echo ""

echo -e "${YELLOW}üçé Step 3: Reinstalling iOS dependencies...${NC}"
cd ios
rm -rf Pods Podfile.lock
pod install --repo-update
cd ..
echo -e "${GREEN}‚úÖ iOS dependencies installed${NC}"
echo ""

echo -e "${YELLOW}üîç Step 4: Running analysis...${NC}"
flutter analyze --no-fatal-infos
if [ $? -ne 0 ]; then
    echo -e "${RED}‚ö†Ô∏è  Warning: Analysis found issues. Consider fixing them before release.${NC}"
    echo -e "${YELLOW}Continue anyway? (y/n):${NC}"
    read -r response
    if [[ ! "$response" =~ ^[Yy]$ ]]; then
        echo -e "${RED}‚ùå Build cancelled by user.${NC}"
        exit 1
    fi
fi
echo -e "${GREEN}‚úÖ Analysis completed${NC}"
echo ""

echo -e "${YELLOW}üß™ Step 5: Running tests...${NC}"
if flutter test > /dev/null 2>&1; then
    echo -e "${GREEN}‚úÖ All tests passed${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Warning: Some tests failed or no tests found${NC}"
fi
echo ""

echo -e "${YELLOW}üèóÔ∏è  Step 6: Building iOS release...${NC}"
echo "This may take a few minutes..."

# Build for iOS App Store
flutter build ios --release \
    --dart-define=ENVIRONMENT=production \
    --build-name=$VERSION \
    --build-number=$BUILD_NUMBER

if [ $? -eq 0 ]; then
    echo -e "${GREEN}‚úÖ iOS build completed successfully${NC}"
else
    echo -e "${RED}‚ùå iOS build failed${NC}"
    exit 1
fi
echo ""

echo -e "${YELLOW}üîí Step 7: Applying privacy manifest fix...${NC}"
if [ -f "./fix_privacy_manifests.sh" ]; then
    ./fix_privacy_manifests.sh
    echo -e "${GREEN}‚úÖ Privacy manifests applied${NC}"
else
    echo -e "${YELLOW}‚ö†Ô∏è  Privacy manifest script not found, skipping...${NC}"
fi
echo ""

echo -e "${YELLOW}üìã Step 8: Build summary...${NC}"
echo "  ‚Ä¢ Build Type: Release (App Store)"
echo "  ‚Ä¢ Platform: iOS"
echo "  ‚Ä¢ Architecture: Universal"
echo "  ‚Ä¢ Location: build/ios/iphoneos/Runner.app"
echo "  ‚Ä¢ Privacy Manifests: Applied"
echo ""

echo -e "${BLUE}üì± Next Steps for App Store Deployment:${NC}"
echo "1. Open Xcode: open ios/Runner.xcworkspace"
echo "2. Select 'Any iOS Device (arm64)' as target"
echo "3. Go to Product ‚Üí Archive"
echo "4. Distribute App ‚Üí App Store Connect"
echo "5. Upload to App Store Connect via Organizer"
echo ""

echo -e "${GREEN}üéâ Build process completed successfully!${NC}"
echo -e "${BLUE}Your app is ready for App Store submission with privacy compliance!${NC}"

# Optional: Open Xcode workspace
echo -e "${YELLOW}Would you like to open Xcode now? (y/n):${NC}"
read -r open_xcode
if [[ "$open_xcode" =~ ^[Yy]$ ]]; then
    echo -e "${BLUE}üöÄ Opening Xcode...${NC}"
    open ios/Runner.xcworkspace
fi

echo ""
echo -e "${GREEN}‚ú® Happy releasing! ‚ú®${NC}"